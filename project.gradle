ext.publishDir = "$rootDir" + File.separator + "publish"

def getShortCommitVersion() {
    try {
        def commitHashProc = "git rev-parse --short HEAD".execute()
        commitHashProc.waitFor()
        if (commitHashProc.exitValue() == 0) {
            def commitHash = commitHashProc.text.trim()
            return commitHash.substring(0, 7)
        } else {
            println commitHashProc.err.text
            throw new Exception("git exited with non-zero return value")
        }
    } catch (Exception e) {
        println "Failed to run git: " + e.getMessage()
    }
    return "0000000"
}

def getCommitVersion() {
    try {
        def commitHashProc = "git rev-parse HEAD".execute()
        commitHashProc.waitFor()
        if (commitHashProc.exitValue() == 0) {
            def commitHash = commitHashProc.text.trim()
            return commitHash
        } else {
            println commitHashProc.err.text
            throw new Exception("git exited with non-zero return value")
        }
    } catch (Exception e) {
        println "Failed to run git: " + e.getMessage()
    }
    return "0000000000000000000000000000000000000000"
}

def getBranch() {
    String sha = getShortCommitVersion()
    try {
        def commitHashProc = "git name-rev --name-only --exclude=tags/* $sha".execute()
        commitHashProc.waitFor()
        if (commitHashProc.exitValue() == 0) {
            def commitHash = commitHashProc.text.trim()
            return commitHash
        } else {
            println commitHashProc.err.text
            throw new Exception("git exited with non-zero return value")
        }
    } catch (Exception e) {
        println "Failed to run git: " + e.getMessage()
    }
    return "??????"
}

def updateClientCommitProperties() {
    String s = File.separator;
    String filePath = "$rootDir${s}core${s}src${s}main${s}resources${s}assets${s}minecraft${s}client${s}properties${s}app.properties"

    try {
        File propertiesFile = new File(filePath)
        if (propertiesFile.createNewFile()) {
            System.out.println("File created: " + propertiesFile.getName())
        } else {
            System.out.println("Rewriting " + filePath + "...")
            propertiesFile.delete()
            propertiesFile.createNewFile()
        }

        FileWriter writer = new FileWriter(filePath)
        writer.write(
                "git.commit.id.abbrev=${getShortCommitVersion()}\n" +
                "git.commit.id=${getCommitVersion()}\n" +
                "git.branch=${getBranch()}")
        writer.close()
        System.out.println("Successfully wrote to properties file.")

        System.out.println("Commit: ${getCommitVersion()}")
        System.out.println("Commit abbreviation: ${getShortCommitVersion()}")
        System.out.println("Commit branch: ${getBranch()}")
    } catch (IOException e) {
        System.out.println("An error occurred.")
        e.printStackTrace()
    }
}

updateClientCommitProperties()

ext {
    getShortCommitVersion = this.&getShortCommitVersion

    projModID = "cheatbreaker"
    projGroup = "com.cheatbreaker"
    projMixinTweaker = "org.spongepowered.asm.launch.MixinTweaker"
    projMixinConfigs = "mixins.cheatbreaker.json"
    projMixinRefmap = "mixins.cheatbreaker.refmap.json"
    projDepsLocation = "com.cheatbreaker.lib"
}